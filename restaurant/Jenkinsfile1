pipeline {
    agent any

    environment {
        MAVEN_HOME = '/usr/share/maven'
        DOCKER_HUB_REPO = 'hatemboudabra/restaurant_backend'
        MINIKUBE_IP = '192.168.58.2'
        KUBECONFIG = '/home/monpc/.kube/config'
        DASTARDLY_REPORT_DIR = "/var/lib/jenkins/dastardly_output"

    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/hatemboudabra/Restaurant.git'
            }
        }

        stage('Build Application') {
            steps {
                dir('restaurant') {
                    script {
                        sh "${MAVEN_HOME}/bin/mvn clean package -DskipTests"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('restaurant') {
                    script {
                        // Build the Docker image
                        sh "docker build -t ${DOCKER_HUB_REPO}:latest ."
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                dir('restaurant') {
                    script {
                        // Use Trivy to scan the Docker image
                        sh """
                        docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        -v ${WORKSPACE}/trivy-cache:/root/.cache/ \
                        aquasec/trivy:0.57.1 image \
                        --scanners vuln,config \
                        --timeout 600s \
                        --no-progress \
                        ${DOCKER_HUB_REPO}:latest > trivy-report.txt || echo 'Trivy scan failed, please check logs.'
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('restaurant') {
                    withCredentials([usernamePassword(credentialsId: 'dockerHubToken', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        script {
                            // Push the Docker image to Docker Hub
                            sh "docker login -u $DOCKER_USER -p $DOCKER_PASSWORD"
                            sh "docker push ${DOCKER_HUB_REPO}:latest"
                        }
                    }
                }
            }
        }

        stage('Kubernetes Deploy') {
            steps {
                dir('restaurant/kub') {
                    script {
                        sh 'kubectl apply -f . -n default'
                        sh 'kubectl get pods -n default'
                        sh 'kubectl get svc -n default'
                    }
                }
            }
        }


        stage('Dastardly Scan') {
            steps {
                script {
                    sh "mkdir -p ${DASTARDLY_REPORT_DIR}"
                    sh "chmod -R 777 ${DASTARDLY_REPORT_DIR}"

                    def dastardlyTargetUrl = "http://192.168.58.2:30084/v3/api-docs"

                    sh """
                        docker build -t dastardly-with-curl -f Dockerfile .
                        docker run --rm --user \$(id -u) \
                        -v /var/lib/jenkins/workspace/resarurant_livrini:/var/lib/jenkins/workspace/resarurant_livrini:rw \
                        -e DASTARDLY_TARGET_URL=${dastardlyTargetUrl} \
                        -v /var/lib/jenkins/dastardly_output:/dastardly \
                        dastardly-with-curl bash -c 'curl ${dastardlyTargetUrl}'
                    """



                    def reportExists = sh(script: "ls -1 ${DASTARDLY_REPORT_DIR} | wc -l", returnStdout: true).trim()
                    if (reportExists.toInteger() == 0) {
                        error "Aucun rapport généré par le scan Dastardly"
                    } else {
                        echo "Rapport du scan Dastardly généré avec succès."
                    }
                }
            }
        }







    }

    post {
        always {
            echo 'Pipeline completed.'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}
