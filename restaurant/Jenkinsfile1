pipeline {
    agent any

    environment {
        MAVEN_HOME = '/usr/share/maven'
        DOCKER_HUB_REPO = 'hatemboudabra/restaurant_backend'
        MINIKUBE_IP = '192.168.58.2'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/hatemboudabra/Restaurant.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('restaurant') {
                    script {
                        sh "docker build -t ${DOCKER_HUB_REPO}:latest ."
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                dir('restaurant') {
                    script {
                        sh """
                        docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        -v ${WORKSPACE}/trivy-cache:/root/.cache/ \
                        aquasec/trivy:0.57.1 image \
                        --scanners vuln,config \
                        --timeout 600s \
                        --no-progress \
                        ${DOCKER_HUB_REPO}:latest > trivy-report.txt || echo 'Trivy scan failed, please check logs.'
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('restaurant') {
                    withCredentials([usernamePassword(credentialsId: 'dockerHubToken', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        script {
                            sh "docker login -u $DOCKER_USER -p $DOCKER_PASSWORD"
                            sh "docker push ${DOCKER_HUB_REPO}:latest"
                        }
                    }
                }
            }
        }

        stage('Kubernetes Deploy') {
                    steps {
                        dir('restaurant/kub') {
                            script {
                                // Ensure the correct kubeconfig path is used
                                sh """
                                    export KUBECONFIG=${KUBECONFIG}
                                    kubectl config use-context minikube
                                    kubectl apply -f deployment.yaml -n default
                                    kubectl apply -f service.yaml -n default
                                    kubectl apply -f secret.yaml -n default
                                    kubectl get pods -n default
                                    kubectl get svc -n default
                                """
                            }
                        }
                    }
        }


        stage('Run Dastardly Scan') {
            steps {
                cleanWs()
                dir('restaurant') {
                    script {
                        sh """
                        docker run --rm \
                        --user \$(id -u) \
                        -v ${WORKSPACE}:${WORKSPACE}:rw \
                        -e BURP_START_URL=http://${MINIKUBE_IP}:30084 \
                        -e BURP_REPORT_FILE_PATH=${WORKSPACE}/dastardly-report.xml \
                        aquasec/dastardly:latest || echo 'Dastardly scan failed, check logs.'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
        success {
            echo 'Pipeline executed successfully!'
            archiveArtifacts artifacts: '**/dastardly-report.xml, **/trivy-report.txt', allowEmptyArchive: true
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}
